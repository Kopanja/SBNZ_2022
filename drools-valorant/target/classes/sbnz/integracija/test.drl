//created on: Apr 17, 2022
package integracija

//list any import classes here.
import com.valorant.clip.editor.valorantclip.model.Kill;
import com.valorant.clip.editor.valorantclip.model.Round;
import java.util.List;
import com.valorant.clip.editor.valorantclip.model.EndRound;
import com.valorant.clip.editor.valorantclip.model.TripleKill;
import com.valorant.clip.editor.valorantclip.model.QuadraKill;
import com.valorant.clip.editor.valorantclip.model.Ace;
import com.valorant.clip.editor.valorantclip.model.ClipEvent;
import com.valorant.clip.editor.valorantclip.model.AgentDetectedEvent;
import com.valorant.clip.editor.valorantclip.service.WebSocketService;
import com.valorant.clip.editor.valorantclip.model.FrameAgentDetectionEvent;
import com.valorant.clip.editor.valorantclip.model.Game;
import com.valorant.clip.editor.valorantclip.model.MyKill;
import com.valorant.clip.editor.valorantclip.model.KillPair;
import org.kie.api.definition.type.PropertyReactive;
import java.lang.Integer;
//declare any global variables here

/*

declare FrameAgentDetectionEvent
	@role( event )
	@timestamp ( time )	
end
*/

declare Kill
  @role( event ) 
end

declare MyKill
  @role( event ) 
end


declare Round
  @role( event )
end

declare TripleKill
  @role( event )
end

declare QuadraKill
  @role( event )
end

declare AgentDetectedEvent
	@role( event )
	@expires( 1s )
end

query "isVictory"()
 	$round : Round()
	$result : List() from collect($k : Kill(this after $round, isDefeatAlly == false))
	eval($result.size() == 5)

end

query "isDefeat"()
	$round : Round()
	$result : List() from collect($k : Kill(this after $round, isDefeatAlly == true))
	eval($result.size() == 5)

end


query "isRoundOver"()
	isVictory() or isDefeat()
end



rule "Last five kills"
	when
		Game($myAgent : myAgent) @Watch(!roundsWon, !roundsLost)
		$kills := List(size>1) from collect(Kill() over window:length(5))
		forall(
			$k : Kill() from $kills
			Kill(this == $k,killer.equals($myAgent), isKillAlly == true)
		)
		
    then
    	System.out.println("-------------------------------------------");
    	System.out.println("Last " + $kills.size() + "
    	 kills are my kills");
    	System.out.println($kills);
    	System.out.println("--------------------------------------------");
end
	



rule "Round"
    when
        $r : Round()
    then
        System.out.println("Round started");

end

rule "Kill during Round"
    when
    	$round : Round()
        $k : Kill(this after $round)
    then
       System.out.println("Kill happend during round: " + $k);
       
end


rule "My Kill"
no-loop
	when
		Game($myAgent : myAgent) @Watch(!roundsWon, !roundsLost)
        $k : Kill(killer.equals($myAgent), isKillAlly == true, $time : time)
    then
    	insert(new MyKill($time));
    	System.out.println("My Kill happend during round aaaaaaaaaaaaaa");
end


rule "Is
 round over"
salience -1
    when
    	$round : Round()
        $k : Kill(this after $round)  
        not EndRound()
        isRoundOver()
    then
       System.out.println("Round is over");
       insert(new EndRound());
       kcontext.getKnowledgeRuntime().getAgenda().getAgendaGroup("statistics").setFocus();
       
end


rule "Triple kill during Round"
    when
    	$round : Round()
    	accumulate($k : MyKill(this after $round, $time : time), $minimum : min($time), $maximum : max($time)) and
    	List(size == 3) from collect ($k : MyKill(this after $round))
    	
    then
        System.out.println("Triple Kill");
        insert(new TripleKill(($minimum - 3), ($maximum + 2)));

end


rule "Quadra kill during Round"
    when
    	$tKill : TripleKill()
    	$kill : MyKill(this after $tKill)
    then
        System.out.println("Quadra Kill");
        delete($tKill);
        insert(new QuadraKill($tKill.getStartTime(), ($kill.getTime()+2)));

end

rule "Ace during Round"
    when
    	$qKill : QuadraKill()
    	$kill : MyKill(this after $qKill)
    then
    	delete($qKill);
    	insert(new Ace($qKill.getStartTime(),($kill.getTime()+2)));
        System.out.println("ACE!!!");
end


rule "Send Highlight Clip"
	when
		$round : Round()
		$endRound : EndRound()
		$clipEvent : ClipEvent()
	then
		delete($round);
		System.out.println($clipEvent);
		WebSocketService.send($clipEvent);
		System.out.println("GOTOV");
		
end


